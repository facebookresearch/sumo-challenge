#!/usr/bin/env python3
"""
Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved

This source code is licensed under the MIT license found in the
LICENSE file in the root directory of this source tree.

Build and Installation Script (see README.md) for usage
"""

from setuptools import find_packages, setup
from setuptools.extension import Extension
from Cython.Build import cythonize
from Cython.Distutils import build_ext

import numpy
import sys
import subprocess

args = sys.argv[1:]

# Make a `cleanall` rule to get rid of intermediate and library files
if "cleanall" in args:
    print("Remove build dir if it exists...")
    subprocess.Popen("rm -rf build", shell=True, executable="/bin/bash")
    print("Deleting .so .c and files...")
    subprocess.Popen("find sumo -type f -name '*.so'",
        shell=True, executable="/bin/bash")
    subprocess.Popen("find sumo -type f -name '*.c'",
        shell=True, executable="/bin/bash")
    subprocess.Popen("find sumo -type f -name '*.so' -delete",
        shell=True, executable="/bin/bash")
    subprocess.Popen("find sumo -type f -name '*.c' -delete",
        shell=True, executable="/bin/bash")
    print("Deleting cython generated files...")
    subprocess.Popen("grep --exclude 'setup.py' --exclude-dir 'venv' -rl -e \
        'Generated by Cython' . | xargs rm", shell=True, executable="/bin/bash")
    # Now do a normal clean
    sys.argv[1] = "clean"
    exit()

# Always use build_ext --inplace
if args.count("build_ext") > 0 and args.count("--inplace") == 0:
    sys.argv.insert(sys.argv.index("build_ext") + 1, "--inplace")


# Add new extensions here
extensions = [
    Extension("sumo/base/*",
              sources=["sumo/base/*.pyx"],
              include_dirs=[numpy.get_include(),
                            ".",
                            "/usr/local/include/eigen3",
                            "/usr/include/eigen3"],
              language="c++",
              extra_compile_args=["-std=c++14"],
              extra_link_args=["-std=c++14"]),

    Extension("sumo/geometry/*",
              sources=["sumo/geometry/*.pyx"],
              library_dirs=["/usr/local/Cellar/opencv/3.4.1/lib",
                             '/usr/local/Cellar/boost/1.66.0/lib/'],
              include_dirs=[numpy.get_include(),
                            ".",
                            "/usr/local/include/eigen3",
                            "/usr/include/eigen3",
                            "/usr/local/Cellar/opencv/3.4.1/include",
                            '/usr/local/Cellar/boost/1.66.0/include'],
              language="c++",
              libraries=['opencv_core', 'boost_system'],
              extra_compile_args=["-std=c++14"],
              extra_link_args=["-std=c++14"]),

    Extension("sumo/opencv/*",
              sources=["sumo/opencv/*.pyx"],
              library_dirs=["/usr/local/Cellar/opencv/3.4.1/lib",
                            '/usr/local/Cellar/boost/1.66.0/lib/'],
              include_dirs=[numpy.get_include(),
                            ".",
                            "/usr/local/include/eigen3",
                            "/usr/include/eigen3",
                            "/usr/local/Cellar/opencv/3.4.1/include",
                            '/usr/local/Cellar/boost/1.66.0/include'],
              libraries=['opencv_core', 'boost_system'],
              language="c++",
              extra_compile_args=["-std=c++14"],
              extra_link_args=["-std=c++14"]),

    Extension("sumo/images/*",
              sources=["sumo/images/*.pyx",
                       "sumo/images/RgbdTiff.cpp",
                       "sumo/images/Rgbdci360.cpp"],
              library_dirs=["/usr/local/Cellar/opencv/3.4.1/lib",
                            '/usr/local/Cellar/boost/1.66.0/lib/'],
              include_dirs=[numpy.get_include(),
                            ".",
                            "/usr/local/include/eigen3",
                            "/usr/include/eigen3",
                            "/usr/local/Cellar/opencv/3.4.1/include",
                            '/usr/local/Cellar/boost/1.66.0/include'],
              libraries=['tiff', 'opencv_core', 'boost_system'],
              language="c++",
              extra_compile_args=["-std=c++14", "-DPICOJSON_USE_INT64"],
              extra_link_args=["-std=c++14"]),


    Extension("sumo/threedee/*",
              sources=["sumo/threedee/*.pyx",
                       "sumo/threedee/Mesh.cpp",
                       "sumo/threedee/TexturedMesh.cpp",
                       "sumo/threedee/GltfModel.cpp",
                       "sumo/threedee/tinyply/tinyply.cpp",
                       "sumo/threedee/point_cloud_ply_c.cpp"],
              library_dirs=["/usr/local/Cellar/opencv/3.4.1/lib",
                            '/usr/local/Cellar/boost/1.66.0/lib/'],
              include_dirs=[numpy.get_include(),
                            ".",
                            "/usr/local/include/eigen3",
                            "/usr/include/eigen3",
                            "/usr/local/Cellar/opencv/3.4.1/include",
                            '/usr/local/Cellar/boost/1.66.0/include'],
              libraries=['opencv_core', 'opencv_highgui', 'opencv_imgproc',
                  'boost_system'],
              language="c++",
              extra_compile_args=["-std=c++14"],
              extra_link_args=["-std=c++14"]),

    # Extension("sumo/semantic/*",
    #           sources=["sumo/semantic/*.pyx",],
    #           library_dirs =["/usr/local/Cellar/opencv/3.4.1/lib",
    #                         '/usr/local/Cellar/boost/1.66.0/lib/'],
    #           include_dirs=[numpy.get_include(),
    #                         ".",
    #                         "/usr/local/include/eigen3",
    #                         "/usr/include/eigen3",
    #                         "/usr/local/Cellar/opencv/3.4.1/include",
    #                         '/usr/local/Cellar/boost/1.66.0/include'],
    #           libraries = ['opencv_core', 'boost_system'],
    #           language="c++",
    #           extra_compile_args=["-std=c++14"],
    #           extra_link_args=["-std=c++14"]),
]

requirements = [
    'astroid==1.6.2',
    'cycler==0.10.0',
    'decorator==4.2.1',
    'easydict==1.8',
    'greenlet==0.4.13',
    'h5py>=2.7.1',
    'ipdb==0.10.2',
    'ipython==6.2.1',
    'ipython-genutils==0.2.0',
    'isort==4.3.4',
    'jedi==0.14.0',
    'kiwisolver==1.0.1',
    'lazy-object-proxy==1.3.1',
    'matplotlib==2.2.0',
    'mccabe==0.6.1',
    'mpmath==1.0.0',
    'msgpack==0.5.6',
    'neovim==0.2.4',
    'opencv-python>=3.4.0.12',
    'parso==0.5.0',
    'pexpect==4.4.0',
    'pickleshare==0.7.4',
    'prompt-toolkit==1.0.15',
    'ptyprocess==0.5.2',
    'Pygments==2.2.0',
    'pymesh2==0.1.14',
    'pyny3d>=0.2',
    'pyparsing==2.2.0',
    'python-dateutil==2.7.0',
    'pytz==2018.3',
    'scipy>=1.0.0',
    'Shapely>=1.6.4.post1',
    'sklearn>=0.0',
    'simplegeneric==0.8.1',
    'six==1.11.0',
    'sympy==1.1.1',
    'traitlets==4.3.2',
    'transforms3d==0.3.1',
    'typing==3.6.4',
    'wcwidth==0.1.7',
    'wrapt==1.10.11',
]

setup(
    cmdclass={'build_ext': build_ext},
    ext_modules=cythonize(extensions),
    name='sumo',
    version='1.0',
    description='Sumo challenge python package',
    install_requires=requirements,
    packages=find_packages(),
    include_package_data=True
)
